package com.code.wantsafer;

import com.code.wantsafer.*;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.apache.http.NameValuePair;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.app.Activity;
import android.app.PendingIntent;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.graphics.Color;
import android.location.GpsStatus;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.location.LocationProvider;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.BaseBundle;
import android.os.Build;
import android.os.Bundle;
import android.os.Process;
import android.provider.Settings;
import android.util.Log;
import android.widget.Toast;

import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.BitmapDescriptor;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.Polyline;
import com.google.android.gms.maps.model.PolylineOptions;

	
	public class MainActivity extends Activity {
		private final String TAG = "===WantSafer==>";

		LatLng place;
		String address;
        String injury;
        String pointx;
        String pointy;	       
		
		/** Map */
		private GoogleMap mMap;
//		private TextView txtOutput;
		private Marker markerMe;
		private Location mlocation;
		ArrayList<HashMap<String,String>> myMarker;
		/** 記錄軌跡 */
		private ArrayList<LatLng> traceOfMe;

		/** GPS */
		private LocationManager locationMgr;
		private String provider;
		
		
		private ProgressDialog pDialog;
	    JSONParser jsonParser=new JSONParser();
	    private static String link="http://140.127.218.173/accident.php";

	    private static final String[] Array_address={};
	    private static final String[] Array_injury={};
	    private static final String[] Array_pointx={};
	    private static final String[] Array_pointy={};
	    
	    
	    private static final String TAG_address="address";
	    private static final String TAG_injury="injury";
	    private static final String TAG_pointx="pointx";
	    private static final String TAG_pointy="pointy";
	    
		private static final Context intent = null;    
	    
	    private ArrayList<Poi> Pois = new ArrayList<Poi>();     //建立List，屬性為Poi物件
	    
		@Override
		protected void onCreate(Bundle savedInstanceState) {
			super.onCreate(savedInstanceState);
			setContentView(R.layout.map);
			myMarker=new ArrayList<HashMap<String,String>>();
			Log.e(TAG,"1");
			initMap();
			Log.e(TAG, "ggggggggggggggggggggggggggggggggggggggg");
			if(initLocationProvider()){
				Log.e(TAG, "完成    開啟定位  的指令了");
				whereAmI();
				Log.e(TAG, "-----------------------where am i --------------------------");
			}
		}
				
		@Override
		protected void onStart() {
			super.onStart();
			
	//		initView();
			/*initMap();
			Log.e(TAG, "ggggggggggggggggggggggggggggggggggggggg");
			if(initLocationProvider()){
				Log.e(TAG, "uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu");
				whereAmI();
				Log.e(TAG, "-----------------------where am i --------------------------");
			}else{
				
			}*/
		}


		@Override
		protected void onStop() {
			locationMgr.removeUpdates(locationListener);
			super.onStop();
		}

		@Override
		protected void onResume() {
			super.onResume();
			initMap();
//			drawPolyline();
		}
		
/*		private void initView(){
			txtOutput = (TextView) findViewById(R.id.txtOutput);
		}*/

		@TargetApi(Build.VERSION_CODES.HONEYCOMB)
		/************************************************
		 * 
		 * 						Map部份
		 * 
		 ***********************************************/
		/**
		 * Map初始化
		 */
		@SuppressLint("NewApi")
		private void initMap(){
			if (mMap == null) {
				mMap = ((MapFragment)getFragmentManager().findFragmentById(R.id.map)).getMap();
				
				if (mMap != null) {
					//設定地圖類型
					mMap.setMapType(GoogleMap.MAP_TYPE_NORMAL);
					mMap.setMyLocationEnabled(true);
					Log.e(TAG,"setMap 完成");	
					new ReadAllItem().execute();
					Log.e(TAG,"ReadAllItem 完成");	
				}
				
			}			
		}
		/************************************************
		 * 
		 * 						讀資料、在地圖上標示部份
		 * 
		 ***********************************************/
		
class ReadAllItem extends AsyncTask<String,String,String>{			
	
    		MarkerOptions markerOptions = new MarkerOptions();
    		@Override
	        protected void onPreExecute() {
	        	super.onPreExecute();
	            pDialog = new ProgressDialog(MainActivity.this);
	            pDialog.setMessage("載入中...");
	            pDialog.setIndeterminate(false);
	            pDialog.setCancelable(false);
	            pDialog.show();
         
	        }
	        protected String doInBackground(String... params) {          //後端執行
	            List<NameValuePair> list=new ArrayList<NameValuePair>();
	            JSONArray json=jsonParser.makeHttpRequest(link, "GET", list);
	            Log.e(TAG,"5");	        
	            try{                                 //讀取JSON資料
	                if(json!=null){
	                		

	                    for(int i=0;i<5;i++){    //for(int i=0;i<json.length();i++){
	                        JSONObject jsonobj=json.getJSONObject(i);
	                        address=jsonobj.getString(TAG_address);
	                        injury=jsonobj.getString(TAG_injury);
	                        pointx=jsonobj.getString(TAG_pointx);
	                        pointy=jsonobj.getString(TAG_pointy);	                       
	                        Log.e(TAG,"6");
	                        //double x = Double.parseDouble(pointx);
	                        //double y = Double.parseDouble(pointy);
	                        //Log.e(TAG,"7");
	                        //place = new LatLng(x, y);
	                        //Log.e(TAG,"8");
	                        
	                        Array_address[i] = address;
	                        Array_injury[i] = injury;
	                        Array_pointx[i] = pointx;
	                        Array_pointy[i] = pointy;
	                        Log.e(TAG,"7");
	                        /*
	                        HashMap<String,String> map=new HashMap<String,String>();
	                        map.put(TAG_address,address);
	                        map.put(TAG_injury,injury);
	                        map.put(TAG_pointx,pointx);
	                        map.put(TAG_pointy,pointy);
	                        myMarker.add(map);
	                        */
	                        
	                        
	                        //MarkerOptions marker = new MarkerOptions();
	    					//marker.position(test);
	    					//marker.title(address);
	    					//marker.snippet(injury);				    					
	    					//marker.icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_GREEN));
	    					//mMap.addMarker(marker);
	                        
	                        /*
	                         * 如果要標示座標在地圖上，必須執行在UITHREAD
	                         * */
	                        /*
	                        runOnUiThread(new Runnable() {          
		    	                public void run() {      			    	                	
		    	                	MarkerOptions marker = new MarkerOptions();
		    	                	mMap.addMarker(marker.position(place).title(address).snippet(injury).icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_GREEN)));	
		    	                	Log.e(TAG,"s");
		    	                }
		    	            });	*/	    	            
	                        
	        	            //Pois.add(new Poi("address" , x , y ));	        	            
	        	            
	                        Log.e(TAG,"Address:"+address+",Injury:"+injury+",Pointx"+pointx+",Pointy"+pointy);                        	                    
	                        Log.e(TAG,"計算到第"+i+"筆資料");
	                    }
	                }else{                	
	                  Log.i("這裡是", java.lang.String.valueOf(list));
	                }
	            }catch(JSONException e){
	                e.printStackTrace();
	            }
	            
	            return null;
	        }       
	        protected void onPostExecute(String file_url){
	            pDialog.dismiss();
	            runOnUiThread(new Runnable(){
	                public void run(){
	                	for(int j=0;Array_address[j]!=null;j++){
	                		MarkerOptions marker = new MarkerOptions();
	                		double x = Double.parseDouble(Array_pointx[j]);
	                		double y = Double.parseDouble(Array_pointy[j]);	                	 
	                		mMap.addMarker(marker.position(new LatLng(x, y)).title(Array_address[j]).snippet(Array_injury[j]).icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_GREEN)));	
	                		Log.e(TAG,"s");
	                	}
	                }
	            });
	        }

	        
}
		
		/************************************************
		 * 
		 * 						GPS部份
		 * 
		 ***********************************************/
		/**
		 * GPS初始化，取得可用的位置提供器
		 * @return
		 */
		private boolean initLocationProvider() {
			locationMgr = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
			//2.選擇使用GPS提供器
			if (locationMgr.isProviderEnabled(LocationManager.GPS_PROVIDER) || locationMgr.isProviderEnabled(LocationManager.NETWORK_PROVIDER)) {
				provider = LocationManager.GPS_PROVIDER;
				Log.e(TAG,"yesyesyesyesyesyes!");

			}else{	
				//強制打開GPS
				//openGPS(null);
				
				Toast.makeText(this, "請開啟定位服務", Toast.LENGTH_LONG).show();
	            boolean getService = true; //確認開啟定位服務
	            startActivity(new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS));
				Log.e(TAG,"oengps");
				//直接開啟定位設定的畫面
				//Intent intent = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);
				//startActivity(intent);				
			}
			return false;
		}

		public static final void openGPS(Context context) {
	        Intent GPSIntent = new Intent();
	        GPSIntent.setClassName("com.android.settings","com.android.settings.widget.SettingsAppWidgetProvider");
	        GPSIntent.addCategory("android.intent.category.ALTERNATIVE");
	        GPSIntent.setData(Uri.parse("custom:3"));
	        try {
	            PendingIntent.getBroadcast(context, 0, GPSIntent, 0).send();
	        } catch (PendingIntent.CanceledException e) {
	            e.printStackTrace();
	        }	    
	     }		
		/**
		 * 執行"我"在哪裡
		 * 1.建立位置改變偵聽器
		 * 2.預先顯示上次的已知位置
		 */
		private void whereAmI(){
//			String provider = LocationManager.GPS_PROVIDER;
			Log.e(TAG, "where am i 0 ");
			//取得上次已知的位置
			Location location = locationMgr.getLastKnownLocation(provider);
			
			/*Location mlocation = null;
			double lat= mlocation.getLatitude();
			double lng= mlocation.getLatitude();	*/			
			Log.e(TAG, "where am i 0.5 ");		
			
			
			updateWithNewLocation(location);			
			Log.e(TAG, "where am i 1 ");
			
			
			//GPS Listener
			locationMgr.addGpsStatusListener(gpsListener);			
			Log.e(TAG, "where am i  2 ");
			
			
			//Location Listener
			long minTime = 5000;//ms
			float minDist = 5.0f;//meter
			locationMgr.requestLocationUpdates(provider, minTime, minDist, locationListener);
			
			Log.e(TAG, "where am i  3 ");
		}
		
		/**
		 * 顯示"我"在哪裡
		 * @param lat
		 * @param lng
		 */
		private void showMarkerMe(double lat, double lng){
			if (markerMe != null) {
				markerMe.remove();
			}
			
			MarkerOptions markerOpt = new MarkerOptions();
			markerOpt.position(new LatLng(lat, lng));
			markerOpt.title("我在這裡");
			markerMe = mMap.addMarker(markerOpt);
			
			Toast.makeText(this, "lat:" + lat + ",lng:" + lng, Toast.LENGTH_SHORT).show();
		}
		
		private void cameraFocusOnMe(double lat, double lng){
			CameraPosition camPosition = new CameraPosition.Builder()
											.target(new LatLng(lat, lng))
											.zoom(16)
											.build();
			
			mMap.animateCamera(CameraUpdateFactory.newCameraPosition(camPosition));
		}
		
		private void trackToMe(double lat, double lng){
			if (traceOfMe == null) {
				traceOfMe = new ArrayList<LatLng>();
			}
			traceOfMe.add(new LatLng(lat, lng));
			
			PolylineOptions polylineOpt = new PolylineOptions();
			for (LatLng latlng : traceOfMe) {
				polylineOpt.add(latlng);
			}
			
			polylineOpt.color(Color.RED);
			
			Polyline line = mMap.addPolyline(polylineOpt);
			line.setWidth(10);
		}
		
		/**
		 * 更新並顯示新位置
		 * @param location
		 */
		private void updateWithNewLocation(Location location) {
			String where = "";
			if (location != null) {
				//經度
				double lng = location.getLongitude();
				//緯度
				double lat = location.getLatitude();
				//速度
				float speed = location.getSpeed();
				//時間
				long time = location.getTime();
				String timeString = getTimeString(time);
				
				where = "經度: " + lng + 
						"\n緯度: " + lat + 
						"\n速度: " + speed + 
						"\n時間: " + timeString +
						"\nProvider: " + provider;
				
				//標記"我"
				showMarkerMe(lat, lng);
				Log.e(TAG, "aaaaaaaa");
				cameraFocusOnMe(lat, lng);
				Log.e(TAG, "bbbbbbbb");
				trackToMe(lat, lng);
				Log.e(TAG, "cccccccc");
				//移動攝影機跟著"我"
//				CameraPosition cameraPosition = new CameraPosition.Builder()
//			    .target(new LatLng(lat, lng))      		// Sets the center of the map to ZINTUN
//			    .zoom(13)                   // Sets the zoom
//			    .bearing(90)                // Sets the orientation of the camera to east
//			    .tilt(30)                   // Sets the tilt of the camera to 30 degrees
//			    .build();                   // Creates a CameraPosition from the builder
//				mMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition));
				
//				CameraPosition camPosition = new CameraPosition.Builder()
//												.target(new LatLng(lat, lng))
//												.zoom(16)
//												.build();
	//
//				mMap.animateCamera(CameraUpdateFactory.newCameraPosition(camPosition));
				
			}else{
				where = "No location found.";
			}
			
			//位置改變顯示
//			txtOutput.setText(where);
		}
		
		
		GpsStatus.Listener gpsListener = new GpsStatus.Listener() {
			
			@Override
			public void onGpsStatusChanged(int event) {
				switch (event) {
		        case GpsStatus.GPS_EVENT_STARTED:
		        	Log.d(TAG, "GPS_EVENT_STARTED");
		        	Toast.makeText(MainActivity.this, "GPS_EVENT_STARTED", Toast.LENGTH_SHORT).show();
		            break;

		        case GpsStatus.GPS_EVENT_STOPPED:
		        	Log.d(TAG, "GPS_EVENT_STOPPED");
		        	Toast.makeText(MainActivity.this, "GPS_EVENT_STOPPED", Toast.LENGTH_SHORT).show();
		            break;

		        case GpsStatus.GPS_EVENT_FIRST_FIX:
		        	Log.d(TAG, "GPS_EVENT_FIRST_FIX");
		        	Toast.makeText(MainActivity.this, "GPS_EVENT_FIRST_FIX", Toast.LENGTH_SHORT).show();
		            break;

		        case GpsStatus.GPS_EVENT_SATELLITE_STATUS:
		        	Log.d(TAG, "GPS_EVENT_SATELLITE_STATUS");
		            break;
				}
			}
		};
		
		
		LocationListener locationListener = new LocationListener(){

			@Override
			public void onLocationChanged(Location location) {
				updateWithNewLocation(location);
				Toast.makeText(MainActivity.this, "位置變換了! ", Toast.LENGTH_SHORT).show();
			}

			@Override
			public void onProviderDisabled(String provider) {
				updateWithNewLocation(null);
				Toast.makeText(MainActivity.this, "GPS 沒 開 ! ", Toast.LENGTH_SHORT).show();
			}

			@Override
			public void onProviderEnabled(String provider) {
				
			}

			@Override
			public void onStatusChanged(String provider, int status, Bundle extras) {
				switch (status) {
			    case LocationProvider.OUT_OF_SERVICE:
			        Log.v(TAG, "Status Changed: Out of Service");
			        Toast.makeText(MainActivity.this, "Status Changed: Out of Service",
			                Toast.LENGTH_SHORT).show();
			        break;
			    case LocationProvider.TEMPORARILY_UNAVAILABLE:
			        Log.v(TAG, "Status Changed: Temporarily Unavailable");
			        Toast.makeText(MainActivity.this, "Status Changed: Temporarily Unavailable",
			                Toast.LENGTH_SHORT).show();
			        break;
			    case LocationProvider.AVAILABLE:
			        Log.v(TAG, "Status Changed: Available");
			        Toast.makeText(MainActivity.this, "Status Changed: Available",
			                Toast.LENGTH_SHORT).show();
			        break;
			    }
			}
			
		};
		
		private String getTimeString(long timeInMilliseconds){
			SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			return format.format(timeInMilliseconds);
			
		}
		
	}
